00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.14.01
Created On: 5/23/2014 10:17:18 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Derek Willms, Binh Nguyen, Brian Quigley
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7      
00000000  =00000000                  8  begin           EQU     $00000000
00000000  =00FFFFFE                  9  end             EQU     $00FFFFFE
00000000                            10  
00001000                            11  START:          ORG     $1000
00001000                            12  
00001000  43F9 000011D6             13  start           LEA     greeting,A1         * Assign greeting to A1
00001006  103C 000E                 14                  MOVE.B  #14,D0              * Assign prompt task code to D0
0000100A  4E4F                      15                  TRAP    #15                 * Display greeting
0000100C                            16                  
0000100C  43F9 000011F9             17  get_start       LEA     start_prompt,A1     * Assign starting address prompt to A1
00001012  103C 000E                 18                  MOVE.B  #14,D0              * Assign prompt task code to D0
00001016  4E4F                      19                  TRAP    #15                 * Display starting address prompt
00001018                            20                  
00001018  43F9 0000132C             21                  LEA     start_input,A1      * Assign start_input as address to store input
0000101E  103C 0002                 22                  MOVE.B  #2,D0               * Assign input task code to D0
00001022  4E4F                      23                  TRAP    #15                 * Store user input in A1
00001024                            24                  
00001024  4EB9 000010D8             25                  JSR     ascii_to_hex        * Translate ASCII input to HEX
0000102A  4EB9 0000114E             26                  JSR     even_check          * Check if given address is odd
00001030  B67C FFFF                 27                  CMP.W   #-1,D3              * Check result of odd check
00001034  67D6                      28                  BEQ     get_start           * If odd, display an error and ask for new starting address
00001036                            29                  
00001036  7A00                      30                  MOVE.L  #begin,D5           * Assign minimum address bound to D5
00001038  B685                      31                  CMP.L   D5,D3               * Compare address to minimum bound
0000103A  6D00 0102                 32                  BLT     bound_error         * Error if address is below minimum
0000103E  2A3C 00FFFFFE             33                  MOVE.L  #end,D5             * Assign maximum address bound to D5
00001044  B685                      34                  CMP.L   D5,D3               * Compare address to maximum bound
00001046  6E00 00F6                 35                  BGT     bound_error         * Error if address is above maximum
0000104A  2A43                      36                  MOVEA.L D3,A5               * Save the lower address into A5
0000104C                            37                  
0000104C  43F9 00001225             38  get_end         LEA     end_prompt,A1       * Assign ending address prompt to A1
00001052  103C 000E                 39                  MOVE.B  #14,D0              * Assign prompt task code to D0
00001056  4E4F                      40                  TRAP    #15                 * Display ending address prompt
00001058                            41                  
00001058  43F9 0000137C             42                  LEA     end_input,A1        * Assign end_input as address to store input
0000105E  103C 0002                 43                  MOVE.B  #2,D0               * Assign input task code to D0
00001062  4E4F                      44                  TRAP    #15                 * Store user input in A1
00001064                            45                  
00001064  4EB9 000010D8             46                  JSR     ascii_to_hex        * Translate ASCII input to HEX
0000106A  4EB9 0000114E             47                  JSR     even_check          * Check if given address is odd
00001070  B67C FFFF                 48                  CMP.W   #-1,D3              * Check result of odd check
00001074  67D6                      49                  BEQ     get_end             * If odd, display an error and ask for new starting address
00001076                            50                  
00001076  B68D                      51                  CMP.L   A5,D3               * Compare address to lower address
00001078  6D00 00C4                 52                  BLT     bound_error         * Error if address is below lower address
0000107C  B685                      53                  CMP.L   D5,D3               * Compare address to maximum bound
0000107E  6E00 00BE                 54                  BGT     bound_error         * Error if address is above maximum
00001082  2C03                      55                  MOVE.L  D3,D6               * Save the upper address into D6
00001084                            56  
00001084  4280                      57  main            CLR.L   D0
00001086  4281                      58                  CLR.L   D1
00001088  200D                      59                  MOVE.L  A5,D0
0000108A  123C 0004                 60                  MOVE.B  #4,D1
0000108E  227C 000012DC             61                  MOVE.L  #buffer,A1
00001094  4EB9 00001174             62                  JSR     hex_to_ascii
0000109A                            63                  
0000109A  4280                      64                  CLR.L   D0
0000109C  301D                      65                  MOVE.W  (A5)+,D0
0000109E  4281                      66                  CLR.L   D1
000010A0  123C 0002                 67                  MOVE.B  #2,D1
000010A4  12FC 0009                 68                  MOVE.B  #$9,(A1)+
000010A8  4EB9 00001174             69                  JSR     hex_to_ascii
000010AE                            70                  
000010AE  12BC 0000                 71                  MOVE.B  #$00,(A1)
000010B2  4280                      72                  CLR.L   D0
000010B4  103C 000D                 73                  MOVE.B  #13,D0
000010B8  43F9 000012DC             74                  LEA     buffer,A1
000010BE  4E4F                      75                  TRAP    #15
000010C0                            76                  
000010C0  BC8D                      77                  CMP.L   A5,D6
000010C2  6F00 0004                 78                  BLE     end_check
000010C6  60BC                      79                  BRA     main
000010C8                            80                  
000010C8                            81  end_check       
000010C8                            82                  
000010C8  43F9 0000129C             83                  LEA     end_message,A1      * Assign end message to A1
000010CE  103C 000E                 84                  MOVE.B  #14,D0              * Assign prompt task code to D0
000010D2  4E4F                      85                  TRAP    #15                 * Display end message
000010D4  4E72 2700                 86                  STOP    #$00002700          * Stop                
000010D8                            87  
000010D8                            88  ***************************************************************************************************
000010D8                            89  ***************************************************************************************************
000010D8                            90  *
000010D8                            91  * SUBROUTINES
000010D8                            92  *
000010D8                            93  ***************************************************************************************************
000010D8                            94  ***************************************************************************************************
000010D8                            95  *////////////////////////////////////////////////////////////////////////////////////////
000010D8                            96  *ascii_to_hex: transforms ASCII input into a hexadecimal address, returns error if invalid characters
000010D8                            97  *D1: ASCII parameter to be converted
000010D8                            98  *D2: Internal data used for comparison
000010D8                            99  *D3: Return data
000010D8                           100  *D6: Internal data used for NULL comparison
000010D8                           101  *////////////////////////////////////////////////////////////////////////////////////////
000010D8  7C00                     102  ascii_to_hex    MOVEQ   #$0,D6              * Clear D6 for null comparison
000010DA  7600                     103                  MOVEQ   #$0,D3              * Clear D3 for new data
000010DC  B203                     104                  CMP.B   D3,D1               * Null check on string
000010DE  6700 005E                105                  BEQ     bound_error         * Error if null
000010E2  0C41 0000                106                  CMPI    #$0,D1              * Character check on string
000010E6  6F00 0056                107                  BLE     bound_error         * Error if less than 0
000010EA  0C41 0008                108                  CMPI    #$8,D1              * Character check on string
000010EE  6E00 004E                109                  BGT     bound_error         * Error if more than 8 characters
000010F2                           110                  
000010F2  1419                     111  translate       MOVE.B  (A1)+,D2            * Move next character into D2
000010F4  B406                     112                  CMP.B   D6,D2               * Null check on character
000010F6  6700 0044                113                  BEQ     result              * End of input if null
000010FA  B43C 0066                114                  CMP.B   #102,D2             * Compare with 102 (highest character code)
000010FE  6E00 003E                115                  BGT     bound_error         * Error if character is higher than 102
00001102  B43C 0060                116                  CMP.B   #96,D2              * Compare with 96 (lowest lowercase hex)
00001106  6E00 0036                117                  BGT     bound_error         * Error if character is lowercase
0000110A  B43C 0046                118                  CMP.B   #70,D2              * Compare with 70 (highest uppercase hex)
0000110E  6E00 002E                119                  BGT     bound_error         * Error if character is between 70 and 96
00001112  B43C 0040                120                  CMP.B   #64,D2              * Compare with 64 (lowest uppercase hex)
00001116  6E00 001A                121                  BGT     uppercase           * Branch to uppercase if above 64
0000111A  B43C 0039                122                  CMP.B   #57,D2              * Compare with 57 (highest decimal number)
0000111E  6E00 001E                123                  BGT     bound_error         * Error if character is between 57 and 64
00001122  B43C 0030                124                  CMP.B   #48,D2              * Compare with 48 (lowest decimal number)
00001126  6D00 0016                125                  BLT     bound_error         * Error if character is below 48
0000112A  0402 0030                126                  SUBI.B  #48,D2              * Subtract 48 from ASCII value to get hexadecimal value
0000112E  6000 0006                127                  BRA     decoded             * Translation complete
00001132                           128                  
00001132  0402 0037                129  uppercase       SUBI.B  #55,D2              * Subtract 55 from ASCII value to get hexadecimal value
00001136                           130  
00001136  E983                     131  decoded         ASL.L   #4,D3               * Clear the return location
00001138  D602                     132                  ADD.B   D2,D3               * Move the resulting character into the return location
0000113A  60B6                     133                  BRA     translate           * Check next character
0000113C                           134                  
0000113C  4E75                     135  result          RTS                         * Return
0000113E                           136  *////////////////////////////////////////////////////////////////////////////////////////
0000113E                           137  *bound_error: The provided address was out of the valid range, print an error message and ask for
0000113E                           138  * a new one.
0000113E                           139  *////////////////////////////////////////////////////////////////////////////////////////
0000113E  43F9 00001251            140  bound_error     LEA     input_error,A1      * Assign input error message into A1
00001144  103C 000E                141                  MOVE.B  #14,D0              * Assign task code for message into D0
00001148  4E4F                     142                  TRAP    #15                 * Display message
0000114A  4EF8 100C                143                  JMP     get_start           * Prompt for starting address again
0000114E                           144  *////////////////////////////////////////////////////////////////////////////////////////
0000114E                           145  *even_check: Checks whether an address is even, branches to error message if odd.  (Does not change 
0000114E                           146  * address if even).
0000114E                           147  *////////////////////////////////////////////////////////////////////////////////////////
0000114E  4282                     148  even_check      CLR.L   D2                  * Clear D2 for new address
00001150  7202                     149                  MOVE.L  #$00000002,D1       * Assign value 2 into D1
00001152  3403                     150                  MOVE.W  D3,D2               * Move address we want to check into D2
00001154  84C1                     151                  DIVU    D1,D2               * Divide the address by 2
00001156  4842                     152                  SWAP    D2                  * Swap D2 to find the remainder
00001158  B43C 0001                153                  CMP.B   #$01,D2             * Check if there is a remainder in D2
0000115C  6700 0004                154                  BEQ     odd_error           * Branch to error if address is odd
00001160  4E75                     155                  RTS                         * Return
00001162                           156  *////////////////////////////////////////////////////////////////////////////////////////
00001162                           157  *odd_error: The provided address was odd, so print an error and return a -1 for the address.
00001162                           158  *////////////////////////////////////////////////////////////////////////////////////////
00001162  43F9 0000127C            159  odd_error       LEA     not_even,A1         * Assign odd error message to A1
00001168  103C 000E                160                  MOVE.B  #14,D0              * Assign prompt task code to D0
0000116C  4E4F                     161                  TRAP    #15                 * Display odd error message
0000116E  4686                     162                  NOT.L   D6                  * Assign D6's value to be -1
00001170  2606                     163                  MOVE.L  D6,D3               * Assign the given address to -1
00001172  4E75                     164                  RTS                         * Return
00001174                           165  *////////////////////////////////////////////////////////////////////////////////////////
00001174                           166  *hex_to_ascii: Translates a given HEX value to ASCII for printing
00001174                           167  *A1: Resulting HEX value
00001174                           168  *D0: Value to be converted
00001174                           169  *D1: Size - Number of bytes to be converted
00001174                           170  *D2: Current character being processed (internal)
00001174                           171  *D3: Loop counter
00001174                           172  *////////////////////////////////////////////////////////////////////////////////////////
00001174  0281 000000FF            173  hex_to_ascii    ANDI.L  #$000000FF,D1       * Isolate the size
0000117A  B23C 0004                174                  CMP.B   #4,D1               * Compare the size to 4
0000117E  6E00 0048                175                  BGT     hta_error           * Error if the size is > 4
00001182  B23C 0000                176                  CMP.B   #0,D1               * Compare the size to 0
00001186  6F00 0040                177                  BLE     hta_error           * Error if the size < 0
0000118A  48E7 B000                178                  MOVEM.L D0/D2-D3,-(A7)      * Push the register data onto the stack
0000118E  E399                     179                  ROL.L   #1,D1               * Rotate left by 1 to multiply the size by 2
00001190  2601                     180                  MOVE.L  D1,D3               * Save the counter into D3
00001192                           181                  
00001192  2400                     182  hta_loop        MOVE.L  D0,D2               * Copy data at D0 into D2
00001194  0202 000F                183                  ANDI.B  #%00001111,D2       * Select the first ASCII character in D2
00001198  B43C 0009                184                  CMP.B   #9,D2               * Compare the character to 9
0000119C  6F00 000A                185                  BLE     hta_number          * Branch to hex number if <= 9
000011A0  0642 0037                186                  ADDI    #55,D2              * If letter, add 55 to make it an ASCII value
000011A4  6000 0006                187                  BRA     hta_continue        * Branch to stack operation
000011A8                           188                  
000011A8  0642 0030                189  hta_number      ADDI    #48,D2              * If number, add 48 to make it an ASCII value
000011AC                           190  
000011AC  1F02                     191  hta_continue    MOVE.B  D2,-(A7)            * Add the ASCII value to the stack
000011AE  E898                     192                  ROR.L   #4,D0               * Rotate right by 4 to get the next character
000011B0  5341                     193                  SUBI    #1,D1               * Subtract 1 from the counter
000011B2  B23C 0000                194                  CMP.B   #0,D1               * Compare the counter to 0
000011B6  66DA                     195                  BNE     hta_loop            * Branch to convert the next character if counter is not 0
000011B8                           196                  
000011B8  12DF                     197  hta_result      MOVE.B  (A7)+,(A1)+         * Retrieve ASCII values from the stack and put them in A1
000011BA  5343                     198                  SUBI    #1,D3               * Subtract 1 from the counter
000011BC  B63C 0000                199                  CMP.B   #0,D3               * Compare the counter to 0
000011C0  66F6                     200                  BNE     hta_result          * Branch to retrieve the next character if counter is not 0
000011C2  4CDF 000D                201                  MOVEM.L (A7)+,D0/D2-D3      * Retrieve original data for the register
000011C6                           202  
000011C6  4E75                     203  hta_finish      RTS                         * Return
000011C8                           204  *////////////////////////////////////////////////////////////////////////////////////////
000011C8                           205  *odd_error: The provided address was odd, so print an error and return a -1 for the address.
000011C8                           206  *////////////////////////////////////////////////////////////////////////////////////////
000011C8  43F9 000012B8            207  hta_error       LEA     hta_error_msg,A1    * Assign hex to ascii error message into A1
000011CE  103C 000E                208                  MOVE.B  #14,D0              * Assign task code for message into D0
000011D2  4E4F                     209                  TRAP    #15                 * Display message
000011D4  4E75                     210                  RTS                         * Return
000011D6                           211  ***************************************************************************************************
000011D6                           212  ***************************************************************************************************
000011D6                           213  *
000011D6                           214  * VARIABLES
000011D6                           215  *
000011D6                           216  ***************************************************************************************************
000011D6                           217  ***************************************************************************************************
000011D6  =0000000D                218  CR              EQU     $0D                 * ASCII code for Carriage Return
000011D6  =0000000A                219  LF              EQU     $0A                 * ASCII code for Line Feed
000011D6= 57 65 6C 63 6F 6D ...    220  greeting        DC.B    'Welcome to EASY68K Disassembler!',CR,LF,0
000011F9= 45 6E 74 65 72 20 ...    221  start_prompt    DC.B    'Enter starting address: ($0 to $00FFFFFE)',CR,LF,0
00001225= 45 6E 74 65 72 20 ...    222  end_prompt      DC.B    'Enter ending address: (start to $00FFFFE)',CR,LF,0
00001251= 54 68 65 72 65 20 ...    223  input_error     DC.B    'There was something wrong with the input',CR,LF,0
0000127C= 54 68 65 20 73 70 ...    224  not_even        DC.B    'The specified address was odd',CR,LF,0
0000129C= 41 6C 6C 20 64 6F ...    225  end_message     DC.B    'All done!  See you later!',CR,LF,0
000012B8= 54 68 65 20 6E 75 ...    226  hta_error_msg   DC.B    'The number of bytes was incorrect',CR,LF,0
000012DC                           227  buffer          DS.B    80
0000132C                           228  start_input     DS.B    80
0000137C                           229  end_input       DS.B    80
000013CC                           230  
000013CC                           231  
000013CC                           232      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_TO_HEX        10D8
BEGIN               0
BOUND_ERROR         113E
BUFFER              12DC
CR                  D
DECODED             1136
END                 FFFFFE
END_CHECK           10C8
END_INPUT           137C
END_MESSAGE         129C
END_PROMPT          1225
EVEN_CHECK          114E
GET_END             104C
GET_START           100C
GREETING            11D6
HEX_TO_ASCII        1174
HTA_CONTINUE        11AC
HTA_ERROR           11C8
HTA_ERROR_MSG       12B8
HTA_FINISH          11C6
HTA_LOOP            1192
HTA_NUMBER          11A8
HTA_RESULT          11B8
INPUT_ERROR         1251
LF                  A
MAIN                1084
NOT_EVEN            127C
ODD_ERROR           1162
RESULT              113C
START               1000
START_INPUT         132C
START_PROMPT        11F9
TRANSLATE           10F2
UPPERCASE           1132
